/*
    STACK360 - Web-based Business Management System
    Copyright (C) 2024 Arahant LLC

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/

/*
*/


package com.arahant.beans;

import com.arahant.exceptions.ArahantException;
import com.arahant.utils.IDGenerator;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;

/**
 * ScreenGroup generated by hbm2java
 */
@Entity
@Table(name = "screen_group")
public class ScreenGroup extends ArahantBean implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	public static final String TABLE_NAME = "screen_group";

	/*
	 * The following lists the currently support benefit wizard configurations
	 */
	/*
	 * 3/8/11 we moved to the wizard_configuration table instead of this hard
	 * coded list
	 */
//    public static final String CALC_BENEFIT_WIZARD = "Benefit Wizard";          //  Version 2
//    public static final String FRANK_BENEFIT_WIZARD = "Frank Benefit Wizard";   //  Version 2 with a smoker screen
//    public static final String ONBOARDING = "Onboarding";                       //  Eventually onboarding
//    public static final String RLG = "Top Level Benefit Wizard";                //  Version 2 as a top level screen group
//    public static final String SIMPLE = "Simple Wizard";                        //  Version 3
//    public static final String FRANK_SIMPLE = "Frank Simple Wizard";            //  Version 3 with smoker screen
	// Fields
	private String screenGroupId;
	public static final String SCREENGROUPID = "screenGroupId";
	private String name;
	public static final String NAME = "name";
	private Set<ScreenGroupHierarchy> screenGroupHierarchiesForParentScreenGroup = new HashSet<ScreenGroupHierarchy>(0);
	public static final String SCREENGROUPHIERARCHIESFORPARENTSCREENGROUP = "screenGroupHierarchiesForParentScreenGroup";
	private Set<ScreenGroupHierarchy> screenGroupHierarchiesForChildScreenGroup = new HashSet<ScreenGroupHierarchy>(0);
	public static final String SCREENGROUPHIERARCHIESFORCHILDSCREENGROUP = "screenGroupHierarchiesForChildScreenGroup";
	private Set<ProphetLogin> arahantLogins = new HashSet<ProphetLogin>(0);
	public static final String ARAHANTLOGINS = "arahantLogins";
	private Screen parentScreen;
	public static final String PARENT_SCREEN = "parentScreen";
	private String description;
	public static final String DESCRIPTION = "description";
	private Set<SecurityGroup> securityGroups = new HashSet<SecurityGroup>();
	public static final String SECURITY_GROUPS = "securityGroups";
	private char wizardType = 'N';
	public static final String WIZARD_TYPE = "wizardType";
	private char technology;
	public static final String TECHNOLOGY = "technology";


	// Constructors
	public ScreenGroup() {
	}

	/**
	 * minimal constructor
	 */
	public ScreenGroup(final String screenGroupId) {
		this.screenGroupId = screenGroupId;
	}

	// Property accessors
	@Id
	@Column(name = "screen_group_id")
	public String getScreenGroupId() {
		return this.screenGroupId;
	}

	public void setScreenGroupId(final String screenGroupId) {
		this.screenGroupId = screenGroupId;
	}

	@Column(name = "group_name")
	public String getName() {
		return this.name;
	}

	public void setName(final String name) {
		this.name = name;
	}

	@OneToMany(mappedBy = ScreenGroupHierarchy.PARENTSCREENGROUP, fetch = FetchType.LAZY)
	@org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
	public Set<ScreenGroupHierarchy> getScreenGroupHierarchiesForParentScreenGroup() {
		return this.screenGroupHierarchiesForParentScreenGroup;
	}

	public void setScreenGroupHierarchiesForParentScreenGroup(final Set<ScreenGroupHierarchy> screenGroupHierarchiesForParentScreenGroupId) {
		this.screenGroupHierarchiesForParentScreenGroup = screenGroupHierarchiesForParentScreenGroupId;
	}

	@OneToMany(mappedBy = ScreenGroupHierarchy.CHILDSCREENGROUP, fetch = FetchType.LAZY)
	@org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
	public Set<ScreenGroupHierarchy> getScreenGroupHierarchiesForChildScreenGroup() {
		return this.screenGroupHierarchiesForChildScreenGroup;
	}

	public void setScreenGroupHierarchiesForChildScreenGroup(
			final Set<ScreenGroupHierarchy> screenGroupHierarchiesForChildScreenGroupId) {
		this.screenGroupHierarchiesForChildScreenGroup = screenGroupHierarchiesForChildScreenGroupId;
	}

	@OneToMany(mappedBy = ProphetLogin.SCREENGROUP, fetch = FetchType.LAZY)
	@org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
	public Set<ProphetLogin> getArahantLogins() {
		return this.arahantLogins;
	}

	public void setArahantLogins(final Set<ProphetLogin> prophetLogins) {
		this.arahantLogins = prophetLogins;
	}

	/**
	 * @return Returns the parentScreen.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "screen_id")
	public Screen getParentScreen() {
		return parentScreen;
	}

	/**
	 * @param parentScreen The parentScreen to set.
	 */
	public void setParentScreen(final Screen parentScreen) {
		this.parentScreen = parentScreen;
	}

	@ManyToMany
	@JoinTable(name = "screen_group_access",
	joinColumns = {
		@JoinColumn(name = "can_access_screen_group_id")},
	inverseJoinColumns = {
		@JoinColumn(name = "security_group_id")})
	public Set<SecurityGroup> getSecurityGroups() {
		return securityGroups;
	}

	public void setSecurityGroups(Set<SecurityGroup> securityGroups) {
		this.securityGroups = securityGroups;
	}

	@Column(name = "wizard_type")
	public char getWizardType() {
		return wizardType;
	}

	public void setWizardType(char wizardType) {
		this.wizardType = wizardType;
	}

	@Column(name = "technology")
	public char getTechnology() {
		return technology;
	}

	public void setTechnology(char technology) {
		this.technology = technology;
	}

	@Override
	public String keyColumn() {
		return "screen_group_id";
	}

	@Override
	public String tableName() {
		return TABLE_NAME;
	}

	@Override
	public String generateId() throws ArahantException {
		setScreenGroupId(IDGenerator.generate(this));
		return screenGroupId;
	}

	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(final String description) {
		this.description = description;
	}

	@Override
	public boolean equals(Object o) {
		if (screenGroupId == null && o == null)
			return true;
		if (screenGroupId != null && o instanceof ScreenGroup)
			return screenGroupId.equals(((ScreenGroup) o).getScreenGroupId());

		return false;
	}

	@Override
	public int hashCode() {
		if (screenGroupId == null)
			return 0;
		return screenGroupId.hashCode();
	}
}
