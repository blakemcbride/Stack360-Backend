/*
    STACK360 - Web-based Business Management System
    Copyright (C) 2024 Arahant LLC

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/

/*
*/


package com.arahant.beans;

import com.arahant.exceptions.ArahantException;
import com.arahant.utils.IDGenerator;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.WhereJoinTable;

/**
 * OrgGroup generated by hbm2java
 */
@Entity
@Table(name = OrgGroup.TABLE_NAME)
@Inheritance(strategy = InheritanceType.JOINED)
@Cache(region="arahant", usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class OrgGroup extends ArahantBean implements java.io.Serializable, Comparable<OrgGroup> {

    private static final long serialVersionUID = 1L;
    public static final String TABLE_NAME = "org_group";
    public static final String EXTERNAL_REF = "externalId";
    public static final String PAY_SCHEDULE = "paySchedule";
    public static final String ITEMS = "items";
	public static final String COMPANY_ID="companyId";  // wrong!  This is a parent org
    public static final String PARENT_ORG_GROUP_ID = "companyId";
    // Fields
    private String orgGroupId;
    public static final String ORGGROUPID = "orgGroupId";
    private CompanyBase owningCompany;
    public static final String OWNINGCOMPANY = "owningCompany";
    private String name;
    public static final String NAME = "name";
    private int orgGroupType;
    public static final String ORGGROUPTYPE = "orgGroupType";
    //private Set<CompanyBase> companyBases = new HashSet<CompanyBase>(0);
    //public static final String COMPANYBASES = "companyBases";
    private Set<Project> billAtProjects = new HashSet<Project>(0);
    public static final String PROJECTS = "projects";
    private Set<Project> projects = new HashSet<Project>(0);
    private Set<Phone> phones = new HashSet<Phone>(0);
    public static final String PHONES = "phones";
    private Set<OrgGroupAssociation> orgGroupAssociations = new HashSet<OrgGroupAssociation>(0);
    public static final String ORGGROUPASSOCIATIONS = "orgGroupAssociations";
    private Set<OrgGroupHierarchy> orgGroupHierarchiesForChildGroupId = new HashSet<OrgGroupHierarchy>(0);
    public static final String ORGGROUPHIERARCHIESFORCHILDGROUPID = "orgGroupHierarchiesForChildGroupId";
    //private Set<ProjectStatus> projectStatuses = new HashSet<ProjectStatus>(0);
    //public static final String PROJECTSTATUSES = "projectStatuses";
    private Set<StandardProject> standardProjects = new HashSet<StandardProject>(0);
    public static final String STANDARDPROJECTS = "standardProjects";
    private Set<OrgGroupHierarchy> orgGroupHierarchiesForParentGroupId = new HashSet<OrgGroupHierarchy>(0);
    public static final String ORGGROUPHIERARCHIESFORPARENTGROUPID = "orgGroupHierarchiesForParentGroupId";
    private Set<Address> addresses = new HashSet<Address>(0);
    public static final String ADDRESSES = "addresses";
    //private int unbilledTimesheetCount;
    //private String zip;
    private Set<RouteStop> routeStops = new HashSet<RouteStop>(0);
    public static final String ROUTESTOPS = "routeStops";
    private short payPeriodsPerYear;
    private Set<Person> primaryPersons = new HashSet<Person>();
    private String externalId;
    private Set<Item> items = new HashSet<Item>();
    private Set<BankAccount> bankAccounts = new HashSet<BankAccount>();
    public static final String DEFAULT_PROJECT = "defaultProject";
    private Project defaultProject;
    private PaySchedule paySchedule;
    private String eeo1UnitId;
	private String companyId;
    private char eeo1Headquarters = 'N';
    private char eeo1FiledLastYear = 'N';
    private char eeo1Establishment = 'N';
    public static final String EEO1_ESTABLISHMENT = "eeo1Establishment";
    private Set<CompanyFormFolder> folders=new HashSet<CompanyFormFolder>();
    public static final String FOLDERS = "folders";

	private char evalEmailNotify = 'I';
	private int evalEmailFirstDays = 0;
	private int evalEmailNotifyDays = 0;
	private String evalEmailNotifySendDays = "NNNNN";

	private int newWeekBeginDay = 0;
	public static final String VENDOR_GROUPS = "vendorGroups";
    private Set<VendorGroup> vendorGroups = new HashSet<VendorGroup>(0);

	private BenefitClass benefitClass;
	private String benefitClassId;
	private String orgGroupGuid;
	private char timesheetPeriodType = 'I';
	private int timesheetPeriodStartDate;
	private char timesheetShowBillable = 'I';

	public static final String ORGGROUP_GUID = "orgGroupGuid";
	@Column(name="org_group_guid")
	public String getOrgGroupGuid() {
		return orgGroupGuid;
	}

	public void setOrgGroupGuid(String orgGroupGuid) {
		this.orgGroupGuid = orgGroupGuid;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn (name="benefit_class_id")
	public BenefitClass getBenefitClass() {
		return benefitClass;
	}

	public void setBenefitClass(BenefitClass benefitClass) {
		this.benefitClass = benefitClass;
	}

	@Column(name = "benefit_class_id", insertable=false, updatable=false)
	public String getBenefitClassId() {
		return benefitClassId;
	}

	public void setBenefitClassId(String benefitClassId) {
		this.benefitClassId = benefitClassId;
	}

	@OneToMany(mappedBy = VendorGroup.ORG_GROUP, fetch = FetchType.LAZY)
    @org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
    public Set<VendorGroup> getVendorGroups() {
        return this.vendorGroups;
    }

    public void setVendorGroups(final Set<VendorGroup> vendorGroups) {
        this.vendorGroups = vendorGroups;
    }

	@Column(name = "new_week_begin_day")
	public int getNewWeekBeginDay() {
		return newWeekBeginDay;
	}

	public void setNewWeekBeginDay(int newWeekBeginDay) {
		this.newWeekBeginDay = newWeekBeginDay;
	}

	@Column(name = "eval_email_first_days")
	public int getEvalEmailFirstDays() {
		return evalEmailFirstDays;
	}

	public void setEvalEmailFirstDays(int evalEmailFirstDays) {
		this.evalEmailFirstDays = evalEmailFirstDays;
	}

	@Column(name = "eval_email_notify")
	public char getEvalEmailNotify() {
		return evalEmailNotify;
	}

	public void setEvalEmailNotify(char evalEmailNotify) {
		this.evalEmailNotify = evalEmailNotify;
	}

	@Column(name = "eval_email_notify_days")
	public int getEvalEmailNotifyDays() {
		return evalEmailNotifyDays;
	}

	public void setEvalEmailNotifyDays(int evalEmailNotifyDays) {
		this.evalEmailNotifyDays = evalEmailNotifyDays;
	}

	@Column(name = "eval_email_send_days")
	public String getEvalEmailNotifySendDays() {
		return evalEmailNotifySendDays;
	}

	public void setEvalEmailNotifySendDays(String evalEmailNotifySendDays) {
		this.evalEmailNotifySendDays = evalEmailNotifySendDays;
	}

    @OneToMany(fetch = FetchType.LAZY)
    @org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
    @JoinColumn(name = "location_id")
    public Set<Item> getItems() {
        return items;
    }

    public void setItems(Set<Item> items) {
        this.items = items;
    }

    @Column(name = "eeo1_establishment")
    public char getEeo1Establishment() {
        return eeo1Establishment;
    }

    public void setEeo1Establishment(char eeo1Establishment) {
        this.eeo1Establishment = eeo1Establishment;
    }

    @Column(name = "eeo1_filed_last_year")
    public char getEeo1FiledLastYear() {
        return eeo1FiledLastYear;
    }

    public void setEeo1FiledLastYear(char eeo1FiledLastYear) {
        this.eeo1FiledLastYear = eeo1FiledLastYear;
    }

    @Column(name = "eeo1_headquaters")
    public char getEeo1Headquarters() {
        return eeo1Headquarters;
    }

    public void setEeo1Headquarters(char eeo1Headquarters) {
        this.eeo1Headquarters = eeo1Headquarters;
    }

    @Column(name = "eeo1_unit")
    public String getEeo1UnitId() {
        return eeo1UnitId;
    }

    public void setEeo1UnitId(String eeo1UnitId) {
        this.eeo1UnitId = eeo1UnitId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "pay_schedule_id")
    public PaySchedule getPaySchedule() {
        return paySchedule;
    }

    public void setPaySchedule(PaySchedule paySchedule) {
        this.paySchedule = paySchedule;
    }

    @Column(name = "external_id")
    public String getExternalId() {
        return externalId;
    }

    public void setExternalId(String externalId) {
        this.externalId = externalId;
    }

    // Constructors
    /**
     * @return Returns the payPeriodsPerYear.
     */
    @Column(name = "pay_periods_per_year")
    public short getPayPeriodsPerYear() {
        return payPeriodsPerYear;
    }

    /**
     * @param payPeriodsPerYear The payPeriodsPerYear to set.
     */
    public void setPayPeriodsPerYear(final short payPeriodsPerYear) {
        this.payPeriodsPerYear = payPeriodsPerYear;
    }

    /**
     * @return Returns the zip.
     *
    public String getZip() {
    return zip;
    }

    /**
     * @param zip The zip to set.
     *
    public void setZip(final String zip) {
    this.zip = zip;
    }

    /** default constructor */
    public OrgGroup() {
    }

    // Property accessors
    @Id
    @Column(name = "org_group_id")
    public String getOrgGroupId() {
        return this.orgGroupId;
    }

    public void setOrgGroupId(final String orgGroupId) {
        this.orgGroupId = orgGroupId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "owning_entity_id")
    public CompanyBase getOwningCompany() {
        return this.owningCompany;
    }

    public void setOwningCompany(final CompanyBase companyBase) {
        this.owningCompany = companyBase;
    }

	@Column(name="owning_entity_id", updatable=false,insertable=false)
	public String getCompanyId() {
		return companyId;
	}

	public void setCompanyId(String companyId) {
		this.companyId = companyId;
	}



    @Column(name = "group_name")
    public String getName() {
        return this.name;
    }

    public void setName(final String name) {
        this.name = name;
    }

    @Column(name = "org_group_type")
    public int getOrgGroupType() {
        return this.orgGroupType;
    }

    public void setOrgGroupType(final int orgGroupType) {
        this.orgGroupType = orgGroupType;
    }
    /*
    public Set<CompanyBase> getCompanyBases() {
    return this.companyBases;
    }

    public void setCompanyBases(final Set<CompanyBase> companyBases) {
    this.companyBases = companyBases;
    }
     */

    @OneToMany(mappedBy = Project.ORGGROUP, fetch = FetchType.LAZY)
    @org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
    public Set<Project> getBillAtProjects() {
        return this.billAtProjects;
    }

    public void setBillAtProjects(final Set<Project> projects) {
        this.billAtProjects = projects;
    }

    @OneToMany(mappedBy = Phone.ORGGROUP, fetch = FetchType.LAZY)
    @org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SELECT)
    public Set<Phone> getPhones() {
        return this.phones;
    }

    public void setPhones(final Set<Phone> phones) {
        this.phones = phones;
    }

    @OneToMany(mappedBy = OrgGroupAssociation.ORGGROUP, fetch = FetchType.LAZY)
    @org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
    public Set<OrgGroupAssociation> getOrgGroupAssociations() {
        return this.orgGroupAssociations;
    }

    public void setOrgGroupAssociations(final Set<OrgGroupAssociation> orgGroupAssociations) {
        this.orgGroupAssociations = orgGroupAssociations;
    }

    @OneToMany(mappedBy = OrgGroupHierarchy.ORGGROUPBYCHILDGROUPID, fetch=FetchType.LAZY)
    //@org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT) This was causing errors in some queries
    public Set<OrgGroupHierarchy> getOrgGroupHierarchiesForChildGroupId() {
        return this.orgGroupHierarchiesForChildGroupId;
    }

    public void setOrgGroupHierarchiesForChildGroupId(
            final Set<OrgGroupHierarchy> orgGroupHierarchiesForChildGroupId) {
        this.orgGroupHierarchiesForChildGroupId = orgGroupHierarchiesForChildGroupId;
    }
    /*
    //@OneToMany(mappedBy=ProjectStatus)
    public Set<ProjectStatus> getProjectStatuses() {
    return this.projectStatuses;
    }

    public void setProjectStatuses(final Set<ProjectStatus> projectStatuses) {
    this.projectStatuses = projectStatuses;
    }
     */

    @OneToMany(mappedBy = StandardProject.ORGGROUP, fetch=FetchType.LAZY)
    @org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
    public Set<StandardProject> getStandardProjects() {
        return this.standardProjects;
    }

    public void setStandardProjects(final Set<StandardProject> standardProjects) {
        this.standardProjects = standardProjects;
    }

	/**
	 * Returns a Set of OrgGroupHierarchy records in which the given org group is the parent.  
	 * This only goes one level deep.
	 * 
	 * @return 
	 */
    @OneToMany(mappedBy = OrgGroupHierarchy.ORGGROUPBYPARENTGROUPID, fetch = FetchType.LAZY)
    //@org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)  This was causing errors in some queries
    public Set<OrgGroupHierarchy> getOrgGroupHierarchiesForParentGroupId() {
        return this.orgGroupHierarchiesForParentGroupId;
    }

    public void setOrgGroupHierarchiesForParentGroupId(
            final Set<OrgGroupHierarchy> orgGroupHierarchiesForParentGroupId) {
        this.orgGroupHierarchiesForParentGroupId = orgGroupHierarchiesForParentGroupId;
    }

    @OneToMany(mappedBy = Address.ORGGROUP, fetch = FetchType.LAZY)
    @org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SELECT)
    public Set<Address> getAddresses() {
        return this.addresses;
    }

    public void setAddresses(final Set<Address> addresses) {
        this.addresses = addresses;
    }

    /**
     * @return Returns the unbilledTimesheetCount.
     *
    public int getUnbilledTimesheetCount() {
    return unbilledTimesheetCount;
    }

    /**
     * @param unbilledTimesheetCount The unbilledTimesheetCount to set.
     *
    public void setUnbilledTimesheetCount(final int unbilledTimesheetCount) {
    this.unbilledTimesheetCount = unbilledTimesheetCount;
    }
    /* (non-Javadoc)
     * @see com.arahant.beans.ArahantBean#keyColumn()
     */
    @Override
    public String keyColumn() {
        return "org_group_id";
    }

    /* (non-Javadoc)
     * @see com.arahant.beans.ArahantBean#tableName()
     */
    @Override
    public String tableName() {
        return TABLE_NAME;
    }

    /* (non-Javadoc)
     * @see com.arahant.beans.ArahantBean#generateId()
     */
    @Override
    public String generateId() throws ArahantException {
        setOrgGroupId(IDGenerator.generate(this));
        return orgGroupId;
    }

    /**
     * @return Returns the routeStops.
     */
    @OneToMany(mappedBy = RouteStop.ORG_GROUP, fetch = FetchType.LAZY)
    @org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
    public Set<RouteStop> getRouteStops() {
        return routeStops;
    }

    /**
     * @param routeStops The routeStops to set.
     */
    public void setRouteStops(final Set<RouteStop> routeStops) {
        this.routeStops = routeStops;
    }

    @Override
    public boolean equals(Object o) {
        if (orgGroupId == null && o == null) {
            return true;
        }
        if (orgGroupId != null && o instanceof OrgGroup) {
            return orgGroupId.equals(((OrgGroup) o).getOrgGroupId());
        }

        return false;
    }

    @Override
    public int hashCode() {
        if (orgGroupId == null) {
            return 0;
        }
        return orgGroupId.hashCode();
    }

	@Override
    public int compareTo(OrgGroup o) {
        if (name == null) {
            return -1;
        }
        if (o == null) {
            return -1;
        }
        if (o.getOwningCompany() != null && owningCompany != null) {
            if (owningCompany.getName().equals(o.getOwningCompany().getName())) {
                if (o.name == null) {
                    return 1;
                }
                return name.compareTo(o.name);
            } else {
                return owningCompany.getName().compareTo(o.owningCompany.getName());
            }
        }

        if (o.getOwningCompany() == null && owningCompany == null) {
            return name.compareTo(o.name);
        }


        if (owningCompany == null && o.owningCompany != null) {
            if (name.equals(o.owningCompany.getName())) {
                return -1;
            } else {
                return name.compareTo(o.owningCompany.getName());
            }
        }


        if (owningCompany != null && o.owningCompany == null) {
            if (o.name.equals(owningCompany.getName())) {
                return 1;
            } else {
                return owningCompany.getName().compareTo(o.name);
            }
        }

        return 0; //should never happen
    }

    /**
     * @return Returns the projects.
     */
    @OneToMany(mappedBy = Project.REQUESTING_ORG_GROUP, fetch=FetchType.LAZY)
    @org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
    public Set<Project> getProjects() {
        return projects;
    }

    /**
     * @param projects The projects to set.
     */
    public void setProjects(Set<Project> projects) {
        this.projects = projects;
    }

    @ManyToMany
    @JoinTable(name = "org_group_association",
    joinColumns = {@JoinColumn(name = "org_group_id")},
    inverseJoinColumns = {@JoinColumn(name = "person_id")})
    @WhereJoinTable(clause = "primary_indicator='Y'")
    public Set<Person> getPrimaryPersons() {
        return primaryPersons;
    }

    public void setPrimaryPersons(Set<Person> primaryPersons) {
        this.primaryPersons = primaryPersons;
    }

    @OneToMany(mappedBy = BankAccount.ORG_GROUP,fetch = FetchType.LAZY)
    @org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
    public Set<BankAccount> getBankAccounts() {
        return bankAccounts;
    }

    public void setBankAccounts(Set<BankAccount> bankAccounts) {
        this.bankAccounts = bankAccounts;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "default_project_id")
    public Project getDefaultProject() {
        return defaultProject;
    }

    public void setDefaultProject(Project defaultProject) {
        this.defaultProject = defaultProject;
    }

    @ManyToMany
    @JoinTable(name = "company_form_org_join",
    joinColumns = {@JoinColumn(name = "org_group_id")},
    inverseJoinColumns = {@JoinColumn(name = "folder_id")})
    public Set<CompanyFormFolder> getFolders() {
            return folders;
    }

    @Column(name = "timesheet_period_type")
	public char getTimesheetPeriodType() {
		return timesheetPeriodType;
	}

	public void setTimesheetPeriodType(char timesheetPeriodType) {
		this.timesheetPeriodType = timesheetPeriodType;
	}

    @Column(name = "timesheet_period_start_date")
	public int getTimesheetPeriodStartDate() {
		return timesheetPeriodStartDate;
	}

	public void setTimesheetPeriodStartDate(int timesheetPeriodStartDate) {
		this.timesheetPeriodStartDate = timesheetPeriodStartDate;
	}

    @Column(name = "timesheet_show_billable")
	public char getTimesheetShowBillable() {
		return timesheetShowBillable;
	}

	public void setTimesheetShowBillable(char timesheetShowBillable) {
		this.timesheetShowBillable = timesheetShowBillable;
	}

    public void setFolders(Set<CompanyFormFolder> folders) {
            this.folders = folders;
    }
        @Override
    public String toString(){
        return this.name;
    }
}
