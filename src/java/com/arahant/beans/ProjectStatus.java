/*
    STACK360 - Web-based Business Management System
    Copyright (C) 2024 Arahant LLC

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses.
*/

/*
*/


package com.arahant.beans;

import com.arahant.exceptions.ArahantException;
import com.arahant.utils.IDGenerator;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;

/**
 * ProjectStatus generated by hbm2java
 */
@Entity
@Table(name = ProjectStatus.TABLE_NAME)
public class ProjectStatus extends ArahantBean implements java.io.Serializable, Comparable<ProjectStatus> {

	private static final long serialVersionUID = 1L;
	public static final String TABLE_NAME = "project_status";
	public static final char BOTH = 'B';
	// public static final char COMPANY = 'C';
	public static final char CLIENT = 'L';
	// Fields
	private String projectStatusId;
	public static final String PROJECTSTATUSID = "projectStatusId";
	private String code;
	public static final String CODE = "code";
	private String description;
	public static final String DESCRIPTION = "description";
//	private Set<StandardProject> standardProjects = new HashSet<StandardProject>(0);
//	public static final String STANDARDPROJECTS = "standardProjects";
	private Set<Project> projects = new HashSet<Project>(0);
	public static final String PROJECTS = "projects";
	private Set<RoutePath> fromRoutePaths = new HashSet<RoutePath>(0);
	public static final String FROMROUTEPATHS = "fromRoutePaths";
	private Set<RoutePath> toRoutePaths = new HashSet<RoutePath>(0);
	public static final String TOROUTEPATHS = "toRoutePaths";
	public static final String ACTIVE = "active";
	private Set<Route> routes = new HashSet<Route>(0);
	private Set<ProjectHistory> projectHistoriesByToStatus = new HashSet<ProjectHistory>(0);
	public static final String ALLOWED_ROUTE_STOPS = "allowedRouteStops";

	@ManyToMany
	@JoinTable(name = "project_status_rs_join",
	joinColumns = {
		@JoinColumn(name = "project_status_id")},
	inverseJoinColumns = {
		@JoinColumn(name = "route_stop_id")})
	public Set<RouteStop> getAllowedRouteStops() {
		return allowedRouteStops;
	}

	public void setAllowedRouteStops(Set<RouteStop> allowedRouteStops) {
		this.allowedRouteStops = allowedRouteStops;
	}
	private Set<ProjectHistory> projectHistoriesByFromStatus = new HashSet<ProjectHistory>(0);
	private Set<RouteStop> allowedRouteStops = new HashSet<RouteStop>(0);
	private char active;
	public static final String COMPANY_ID = "companyId";
	private String companyId;
	public static final String COMPANY = "company";
	private CompanyDetail company;
	public static final String LAST_ACTIVE_DATE = "lastActiveDate";
	private int lastActiveDate;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id")
	public CompanyDetail getCompany() {
		return company;
	}

	public void setCompany(CompanyDetail company) {
		this.company = company;
	}

	@Column(name = "company_id", insertable = false, updatable = false)
	public String getCompanyId() {
		return companyId;
	}

	public void setCompanyId(String companyId) {
		this.companyId = companyId;
	}

	@Column(name = "last_active_date")
	public int getLastActiveDate() {
		return lastActiveDate;
	}

	public void setLastActiveDate(int lastActiveDate) {
		this.lastActiveDate = lastActiveDate;
	}
	/*
	 * public Set<StandardProject> getStandardProjects() { return
	 * standardProjects; }
	 *
	 * public void setStandardProjects(Set<StandardProject> standardProjects) {
	 * this.standardProjects = standardProjects; }
	 */
	// Constructors

	/**
	 * Returns:
	 *
	 * Y = active, in-process project
	 * O = active, ongoing project (like meetings)
	 * N = inactive project
	 *
	 * @return Returns the above flag
	 */
	@Column(name = "active")
	public char getActive() {
		return active;
	}

	/**
	 * @param active The active to set.
	 */
	public void setActive(final char active) {
		this.active = active;
	}

	/**
	 * @return Returns the routes.
	 */
	@OneToMany(mappedBy = Route.INITIAL_STATUS, fetch = FetchType.LAZY)
	@org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
	public Set<Route> getRoutes() {
		return routes;
	}

	/**
	 * @param routes The routes to set.
	 */
	public void setRoutes(final Set<Route> routes) {
		this.routes = routes;
	}

	/**
	 * default constructor
	 */
	public ProjectStatus() {
	}

	/**
	 * minimal constructor
	 */
	public ProjectStatus(final String projectStatusId) {
		this.projectStatusId = projectStatusId;
	}

	// Property accessors
	@Id
	@Column(name = "project_status_id")
	public String getProjectStatusId() {
		return this.projectStatusId;
	}

	public void setProjectStatusId(final String projectStatusId) {
		this.projectStatusId = projectStatusId;
	}

	@Column(name = "code")
	public String getCode() {
		return this.code;
	}

	public void setCode(final String code) {
		this.code = code;
	}

	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(final String description) {
		this.description = description;
	}

	@OneToMany(mappedBy = Project.PROJECTSTATUS, fetch = FetchType.LAZY)
	@org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
	public Set<Project> getProjects() {
		return this.projects;
	}

	public void setProjects(final Set<Project> projects) {
		this.projects = projects;
	}


	@Override
	public String keyColumn() {
		return "project_status_id";
	}

	@Override
	public String tableName() {
		return TABLE_NAME;
	}

	@Override
	public String generateId() throws ArahantException {
		setProjectStatusId(IDGenerator.generate(this));
		return projectStatusId;
	}

	/**
	 * @return Returns the fromRoutePaths.
	 */
	@OneToMany(mappedBy = RoutePath.FROM_PROJECT_STATUS, fetch = FetchType.LAZY)
	@org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
	public Set<RoutePath> getFromRoutePaths() {
		return fromRoutePaths;
	}

	/**
	 * @param fromRoutePaths The fromRoutePaths to set.
	 */
	public void setFromRoutePaths(final Set<RoutePath> fromRoutePaths) {
		this.fromRoutePaths = fromRoutePaths;
	}

	/**
	 * @return Returns the toRoutePaths.
	 */
	@OneToMany(mappedBy = RoutePath.TO_PROJECT_STATUS, fetch = FetchType.LAZY)
	@org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
	public Set<RoutePath> getToRoutePaths() {
		return toRoutePaths;
	}

	/**
	 * @param toRoutePaths The toRoutePaths to set.
	 */
	public void setToRoutePaths(final Set<RoutePath> toRoutePaths) {
		this.toRoutePaths = toRoutePaths;
	}

	/**
	 * @return Returns the projectHistoriesByFromStatus.
	 */
	@OneToMany(mappedBy = ProjectHistory.FROM_STATUS, fetch = FetchType.LAZY)
	@org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
	public Set<ProjectHistory> getProjectHistoriesByFromStatus() {
		return projectHistoriesByFromStatus;
	}

	/**
	 * @param projectHistoriesByFromStatus The projectHistoriesByFromStatus to
	 * set.
	 */
	public void setProjectHistoriesByFromStatus(
			final Set<ProjectHistory> projectHistoriesByFromStatus) {
		this.projectHistoriesByFromStatus = projectHistoriesByFromStatus;
	}

	/**
	 * @return Returns the projectHistoriesByToStatus.
	 */
	@OneToMany(mappedBy = ProjectHistory.TO_STATUS, fetch = FetchType.LAZY)
	@org.hibernate.annotations.Fetch(value = org.hibernate.annotations.FetchMode.SUBSELECT)
	public Set<ProjectHistory> getProjectHistoriesByToStatus() {
		return projectHistoriesByToStatus;
	}

	/**
	 * @param projectHistoriesByToStatus The projectHistoriesByToStatus to set.
	 */
	public void setProjectHistoriesByToStatus(
			final Set<ProjectHistory> projectHistoriesByToStatus) {
		this.projectHistoriesByToStatus = projectHistoriesByToStatus;
	}

	@Override
	public boolean equals(Object o) {
		if (projectStatusId == null && o == null)
			return true;
		if (projectStatusId != null && o instanceof ProjectStatus)
			return projectStatusId.equals(((ProjectStatus) o).getProjectStatusId());

		return false;
	}

	@Override
	public int hashCode() {
		if (projectStatusId == null)
			return 0;
		return projectStatusId.hashCode();
	}

	@Override
	public int compareTo(ProjectStatus o) {
		return code.compareTo(o.code);
	}

	@Override
	public String toString() {
		return this.description;
	}
}
